Proc *Main(Argc Int32, Argv Uint8^^) Int32
	; if chain.
	If False
		DoSomething()
	Elif False
		DoSomething()
	Else
		DoSomething()
	End

	; non-iterative for loop (traditionally called while).
	For False
		DoSomething()
		Break
		Continue
	End

	; named blocks and block-break.
	Block @'Named
		Block
			Break @'Named
			DoSomething()
		End
	End

	; switch-case for jump table.
	; notice multi-condition and no fallthrough.
	Switch 0
		Case [-2, -3, -4]
			DoSomething()
		Case [1, 0, -1]
			DoSomething()
		Base
			DoSomething()
	End
	
	; scope-based defer.
	Block
		Var a Thing := Thing.Create()
		Defer a.Destroy()
		
		; ...
		
		Var Rc Int32 := DoSomething()
		If Rc < 0
			; `a` will be destroyed here.
			; same goes for things like Break or Continue.
			Return 1
		End
		
		; `a` will be destroyed here.
	End

	; iteration-based for statement (C-style for).
	For Var i Int32 Mut := 0, i < 100, ++i
		DoSomethingWith(i)
	End

	; return statement.
	Return 0
End

Proc DoSomething() Null
	; implementation here...
End
