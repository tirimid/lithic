; must be derived from an integer type.
Enum VecType Uint8
	Vec2 := 2

	Vec3 ; automatically increments to 3.
	Vec4 ; 4.
End

Struct Vec2
	x Float32
	y Float32
End

Struct Vec3
	x Float32
	y Float32
	z Float32
End

Struct Vec4
	x Float32
	y Float32
	z Float32
	w Float32
End

Union VecN
	; typenames are not stored in the same namespace as everything else.
	; as such, you can name variables with the same name as their type.
	Vec2 Vec2
	Vec3 Vec3
	Vec4 Vec4
End

Struct Vec
	Data VecN
	Type VecType
End

; example method-style procedure.
; can be invoked using `SomeVec.Add(SomeOtherVec)`.
Proc Vec.Add(Self, Rhs Vec) Vec
	If Self.Type != Rhs.Type
		Return Null[Vec]
	End

	Var Out Vec Mut := Struct Vec
		Type := Self.Type
	End

	Switch Self.Type
		Case [VecType.Vec2]
			Out.Data.Vec2.x := Self.Data.Vec2.x + Rhs.Data.Vec2.x
			Out.Data.Vec2.y := Self.Data.Vec2.y + Rhs.Data.Vec2.y
		Case [VecType.Vec3]
			Out.Data.Vec3.x := Self.Data.Vec3.x + Rhs.Data.Vec3.x
			Out.Data.Vec3.y := Self.Data.Vec3.y + Rhs.Data.Vec3.y
			Out.Data.Vec3.z := Self.Data.Vec3.z + Rhs.Data.Vec3.z
		Case [VecType.Vec4]
			Out.Data.Vec4.x := Self.Data.Vec4.x + Rhs.Data.Vec4.x
			Out.Data.Vec4.y := Self.Data.Vec4.y + Rhs.Data.Vec4.y
			Out.Data.Vec4.z := Self.Data.Vec4.z + Rhs.Data.Vec4.z
			Out.Data.Vec4.w := Self.Data.Vec4.w + Rhs.Data.Vec4.w
		Base
	End

	Return Out
End

; can be invoked using `SomeVec.AddAssign(SomeOtherVec)`.
Proc Vec.AddAssign(Self Mut^, Rhs Vec) Null
	Self.^ := Self.^.Add(Rhs)
End

; equivalent of static methods.
Proc Vec.Create(Val Float32) Vec
	Return Struct Vec
		Type := VecType.Vec4
		Data.Vec4 := Struct Vec4
			x := Val
			y := Val
			z := Val
			w := Val
		End
	End
End

; method-style procedures can be declared in the following ways:
;
; * with no `Self` argument.
; * with a `Self` first argument.
; * with a `Self Mut` first argument.
; * with a `Self^` first argument.
; * with a `Self^ Mut` first argument.
; * with a `Self Mut^` first argument.
; * with a `Self Mut^ Mut` first argument.
;
; method-style procedures declared with `Self Mut^` can only be called on
; variables whose types are marked with `Mut`.

Proc NullStructures() Null
	Var Vec Vec := Null[Vec]
	If Vec == Null[Vec]
		; `Vec` is fully zeroed.
	Else
		; `Vec` is nonzero.
	End
End
