Import C.Stdio

Proc *Main(Argc: Int32, Argv: Uint8^^): Int32
	; test var arg print using `PrintAll()`.
	PrintAll("hello", "world")
	PrintAll("these", "words", "will", "form", "a", "sentence")
	PrintAll()

	; test var arg addition using `MulAdd()`.
	printf(Base "%d", MulAdd(2, 1, 2, 3))
	printf(Base "%d", MulAdd(3, 2, 2, 2))
	printf(Base "%d", MulAdd(0))

	Return 0
End

Proc PrintAll(...)
	Var i: Usize Mut := 0's
	While i < VargCount
		printf(Base "%s ", NextVarg[Uint8^])
		++i
	End

	printf("\n")
End

Proc MulAdd(Mul: Int32, ...): Int32
	Var Sum: Int32 Mut := 0

	Var i: Int32 Mut := 0
	While i < Mul
		Var j: Usize Mut := 0's
		While j < VargCount
			Sum += Mul * NextVarg[Int32]
			++j
		End
		ResetVargs
		++i
	End

	Return Sum
End

; this function will have its variadic arguments passed in the same way as a C
; function, without a count, meaning you must have an argument prior to them and
; cannot use `VargCount` within the function.
; this should be used for creating interfaces to external C functions.
Proc CVarArgs(Something: Int32, Base ...)
	; do something.
End
